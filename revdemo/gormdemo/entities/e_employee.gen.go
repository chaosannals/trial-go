// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entities

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormdemo/models"
)

func newEEmployee(db *gorm.DB, opts ...gen.DOOption) eEmployee {
	_eEmployee := eEmployee{}

	_eEmployee.eEmployeeDo.UseDB(db, opts...)
	_eEmployee.eEmployeeDo.UseModel(&models.EEmployee{})

	tableName := _eEmployee.eEmployeeDo.TableName()
	_eEmployee.ALL = field.NewAsterisk(tableName)
	_eEmployee.ID = field.NewUint64(tableName, "id")
	_eEmployee.Account = field.NewString(tableName, "account")
	_eEmployee.Password = field.NewBytes(tableName, "password")
	_eEmployee.Nickname = field.NewString(tableName, "nickname")
	_eEmployee.CreatedAt = field.NewTime(tableName, "created_at")
	_eEmployee.LastLoginAt = field.NewTime(tableName, "last_login_at")

	_eEmployee.fillFieldMap()

	return _eEmployee
}

type eEmployee struct {
	eEmployeeDo eEmployeeDo

	ALL         field.Asterisk
	ID          field.Uint64
	Account     field.String
	Password    field.Bytes
	Nickname    field.String
	CreatedAt   field.Time
	LastLoginAt field.Time

	fieldMap map[string]field.Expr
}

func (e eEmployee) Table(newTableName string) *eEmployee {
	e.eEmployeeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eEmployee) As(alias string) *eEmployee {
	e.eEmployeeDo.DO = *(e.eEmployeeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eEmployee) updateTableName(table string) *eEmployee {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint64(table, "id")
	e.Account = field.NewString(table, "account")
	e.Password = field.NewBytes(table, "password")
	e.Nickname = field.NewString(table, "nickname")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.LastLoginAt = field.NewTime(table, "last_login_at")

	e.fillFieldMap()

	return e
}

func (e *eEmployee) WithContext(ctx context.Context) IEEmployeeDo {
	return e.eEmployeeDo.WithContext(ctx)
}

func (e eEmployee) TableName() string { return e.eEmployeeDo.TableName() }

func (e eEmployee) Alias() string { return e.eEmployeeDo.Alias() }

func (e *eEmployee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eEmployee) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["account"] = e.Account
	e.fieldMap["password"] = e.Password
	e.fieldMap["nickname"] = e.Nickname
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["last_login_at"] = e.LastLoginAt
}

func (e eEmployee) clone(db *gorm.DB) eEmployee {
	e.eEmployeeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eEmployee) replaceDB(db *gorm.DB) eEmployee {
	e.eEmployeeDo.ReplaceDB(db)
	return e
}

type eEmployeeDo struct{ gen.DO }

type IEEmployeeDo interface {
	gen.SubQuery
	Debug() IEEmployeeDo
	WithContext(ctx context.Context) IEEmployeeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEEmployeeDo
	WriteDB() IEEmployeeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEEmployeeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEEmployeeDo
	Not(conds ...gen.Condition) IEEmployeeDo
	Or(conds ...gen.Condition) IEEmployeeDo
	Select(conds ...field.Expr) IEEmployeeDo
	Where(conds ...gen.Condition) IEEmployeeDo
	Order(conds ...field.Expr) IEEmployeeDo
	Distinct(cols ...field.Expr) IEEmployeeDo
	Omit(cols ...field.Expr) IEEmployeeDo
	Join(table schema.Tabler, on ...field.Expr) IEEmployeeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEEmployeeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEEmployeeDo
	Group(cols ...field.Expr) IEEmployeeDo
	Having(conds ...gen.Condition) IEEmployeeDo
	Limit(limit int) IEEmployeeDo
	Offset(offset int) IEEmployeeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEEmployeeDo
	Unscoped() IEEmployeeDo
	Create(values ...*models.EEmployee) error
	CreateInBatches(values []*models.EEmployee, batchSize int) error
	Save(values ...*models.EEmployee) error
	First() (*models.EEmployee, error)
	Take() (*models.EEmployee, error)
	Last() (*models.EEmployee, error)
	Find() ([]*models.EEmployee, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EEmployee, err error)
	FindInBatches(result *[]*models.EEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.EEmployee) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEEmployeeDo
	Assign(attrs ...field.AssignExpr) IEEmployeeDo
	Joins(fields ...field.RelationField) IEEmployeeDo
	Preload(fields ...field.RelationField) IEEmployeeDo
	FirstOrInit() (*models.EEmployee, error)
	FirstOrCreate() (*models.EEmployee, error)
	FindByPage(offset int, limit int) (result []*models.EEmployee, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEEmployeeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e eEmployeeDo) Debug() IEEmployeeDo {
	return e.withDO(e.DO.Debug())
}

func (e eEmployeeDo) WithContext(ctx context.Context) IEEmployeeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eEmployeeDo) ReadDB() IEEmployeeDo {
	return e.Clauses(dbresolver.Read)
}

func (e eEmployeeDo) WriteDB() IEEmployeeDo {
	return e.Clauses(dbresolver.Write)
}

func (e eEmployeeDo) Session(config *gorm.Session) IEEmployeeDo {
	return e.withDO(e.DO.Session(config))
}

func (e eEmployeeDo) Clauses(conds ...clause.Expression) IEEmployeeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eEmployeeDo) Returning(value interface{}, columns ...string) IEEmployeeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eEmployeeDo) Not(conds ...gen.Condition) IEEmployeeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eEmployeeDo) Or(conds ...gen.Condition) IEEmployeeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eEmployeeDo) Select(conds ...field.Expr) IEEmployeeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eEmployeeDo) Where(conds ...gen.Condition) IEEmployeeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eEmployeeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEEmployeeDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e eEmployeeDo) Order(conds ...field.Expr) IEEmployeeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eEmployeeDo) Distinct(cols ...field.Expr) IEEmployeeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eEmployeeDo) Omit(cols ...field.Expr) IEEmployeeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eEmployeeDo) Join(table schema.Tabler, on ...field.Expr) IEEmployeeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eEmployeeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEEmployeeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eEmployeeDo) RightJoin(table schema.Tabler, on ...field.Expr) IEEmployeeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eEmployeeDo) Group(cols ...field.Expr) IEEmployeeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eEmployeeDo) Having(conds ...gen.Condition) IEEmployeeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eEmployeeDo) Limit(limit int) IEEmployeeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eEmployeeDo) Offset(offset int) IEEmployeeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eEmployeeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEEmployeeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eEmployeeDo) Unscoped() IEEmployeeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eEmployeeDo) Create(values ...*models.EEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eEmployeeDo) CreateInBatches(values []*models.EEmployee, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eEmployeeDo) Save(values ...*models.EEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eEmployeeDo) First() (*models.EEmployee, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployee), nil
	}
}

func (e eEmployeeDo) Take() (*models.EEmployee, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployee), nil
	}
}

func (e eEmployeeDo) Last() (*models.EEmployee, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployee), nil
	}
}

func (e eEmployeeDo) Find() ([]*models.EEmployee, error) {
	result, err := e.DO.Find()
	return result.([]*models.EEmployee), err
}

func (e eEmployeeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EEmployee, err error) {
	buf := make([]*models.EEmployee, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eEmployeeDo) FindInBatches(result *[]*models.EEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eEmployeeDo) Attrs(attrs ...field.AssignExpr) IEEmployeeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eEmployeeDo) Assign(attrs ...field.AssignExpr) IEEmployeeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eEmployeeDo) Joins(fields ...field.RelationField) IEEmployeeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eEmployeeDo) Preload(fields ...field.RelationField) IEEmployeeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eEmployeeDo) FirstOrInit() (*models.EEmployee, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployee), nil
	}
}

func (e eEmployeeDo) FirstOrCreate() (*models.EEmployee, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployee), nil
	}
}

func (e eEmployeeDo) FindByPage(offset int, limit int) (result []*models.EEmployee, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eEmployeeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eEmployeeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eEmployeeDo) Delete(models ...*models.EEmployee) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eEmployeeDo) withDO(do gen.Dao) *eEmployeeDo {
	e.DO = *do.(*gen.DO)
	return e
}
