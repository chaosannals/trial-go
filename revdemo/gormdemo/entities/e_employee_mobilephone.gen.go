// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entities

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormdemo/models"
)

func newEEmployeeMobilephone(db *gorm.DB, opts ...gen.DOOption) eEmployeeMobilephone {
	_eEmployeeMobilephone := eEmployeeMobilephone{}

	_eEmployeeMobilephone.eEmployeeMobilephoneDo.UseDB(db, opts...)
	_eEmployeeMobilephone.eEmployeeMobilephoneDo.UseModel(&models.EEmployeeMobilephone{})

	tableName := _eEmployeeMobilephone.eEmployeeMobilephoneDo.TableName()
	_eEmployeeMobilephone.ALL = field.NewAsterisk(tableName)
	_eEmployeeMobilephone.EmployeeID = field.NewUint64(tableName, "employee_id")
	_eEmployeeMobilephone.Mobilephone = field.NewString(tableName, "mobilephone")
	_eEmployeeMobilephone.CreatedAt = field.NewTime(tableName, "created_at")

	_eEmployeeMobilephone.fillFieldMap()

	return _eEmployeeMobilephone
}

type eEmployeeMobilephone struct {
	eEmployeeMobilephoneDo eEmployeeMobilephoneDo

	ALL         field.Asterisk
	EmployeeID  field.Uint64 // 员工ID
	Mobilephone field.String // 手机号码
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (e eEmployeeMobilephone) Table(newTableName string) *eEmployeeMobilephone {
	e.eEmployeeMobilephoneDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eEmployeeMobilephone) As(alias string) *eEmployeeMobilephone {
	e.eEmployeeMobilephoneDo.DO = *(e.eEmployeeMobilephoneDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eEmployeeMobilephone) updateTableName(table string) *eEmployeeMobilephone {
	e.ALL = field.NewAsterisk(table)
	e.EmployeeID = field.NewUint64(table, "employee_id")
	e.Mobilephone = field.NewString(table, "mobilephone")
	e.CreatedAt = field.NewTime(table, "created_at")

	e.fillFieldMap()

	return e
}

func (e *eEmployeeMobilephone) WithContext(ctx context.Context) IEEmployeeMobilephoneDo {
	return e.eEmployeeMobilephoneDo.WithContext(ctx)
}

func (e eEmployeeMobilephone) TableName() string { return e.eEmployeeMobilephoneDo.TableName() }

func (e eEmployeeMobilephone) Alias() string { return e.eEmployeeMobilephoneDo.Alias() }

func (e *eEmployeeMobilephone) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eEmployeeMobilephone) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["employee_id"] = e.EmployeeID
	e.fieldMap["mobilephone"] = e.Mobilephone
	e.fieldMap["created_at"] = e.CreatedAt
}

func (e eEmployeeMobilephone) clone(db *gorm.DB) eEmployeeMobilephone {
	e.eEmployeeMobilephoneDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eEmployeeMobilephone) replaceDB(db *gorm.DB) eEmployeeMobilephone {
	e.eEmployeeMobilephoneDo.ReplaceDB(db)
	return e
}

type eEmployeeMobilephoneDo struct{ gen.DO }

type IEEmployeeMobilephoneDo interface {
	gen.SubQuery
	Debug() IEEmployeeMobilephoneDo
	WithContext(ctx context.Context) IEEmployeeMobilephoneDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEEmployeeMobilephoneDo
	WriteDB() IEEmployeeMobilephoneDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEEmployeeMobilephoneDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEEmployeeMobilephoneDo
	Not(conds ...gen.Condition) IEEmployeeMobilephoneDo
	Or(conds ...gen.Condition) IEEmployeeMobilephoneDo
	Select(conds ...field.Expr) IEEmployeeMobilephoneDo
	Where(conds ...gen.Condition) IEEmployeeMobilephoneDo
	Order(conds ...field.Expr) IEEmployeeMobilephoneDo
	Distinct(cols ...field.Expr) IEEmployeeMobilephoneDo
	Omit(cols ...field.Expr) IEEmployeeMobilephoneDo
	Join(table schema.Tabler, on ...field.Expr) IEEmployeeMobilephoneDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEEmployeeMobilephoneDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEEmployeeMobilephoneDo
	Group(cols ...field.Expr) IEEmployeeMobilephoneDo
	Having(conds ...gen.Condition) IEEmployeeMobilephoneDo
	Limit(limit int) IEEmployeeMobilephoneDo
	Offset(offset int) IEEmployeeMobilephoneDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEEmployeeMobilephoneDo
	Unscoped() IEEmployeeMobilephoneDo
	Create(values ...*models.EEmployeeMobilephone) error
	CreateInBatches(values []*models.EEmployeeMobilephone, batchSize int) error
	Save(values ...*models.EEmployeeMobilephone) error
	First() (*models.EEmployeeMobilephone, error)
	Take() (*models.EEmployeeMobilephone, error)
	Last() (*models.EEmployeeMobilephone, error)
	Find() ([]*models.EEmployeeMobilephone, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EEmployeeMobilephone, err error)
	FindInBatches(result *[]*models.EEmployeeMobilephone, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.EEmployeeMobilephone) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEEmployeeMobilephoneDo
	Assign(attrs ...field.AssignExpr) IEEmployeeMobilephoneDo
	Joins(fields ...field.RelationField) IEEmployeeMobilephoneDo
	Preload(fields ...field.RelationField) IEEmployeeMobilephoneDo
	FirstOrInit() (*models.EEmployeeMobilephone, error)
	FirstOrCreate() (*models.EEmployeeMobilephone, error)
	FindByPage(offset int, limit int) (result []*models.EEmployeeMobilephone, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEEmployeeMobilephoneDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e eEmployeeMobilephoneDo) Debug() IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Debug())
}

func (e eEmployeeMobilephoneDo) WithContext(ctx context.Context) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eEmployeeMobilephoneDo) ReadDB() IEEmployeeMobilephoneDo {
	return e.Clauses(dbresolver.Read)
}

func (e eEmployeeMobilephoneDo) WriteDB() IEEmployeeMobilephoneDo {
	return e.Clauses(dbresolver.Write)
}

func (e eEmployeeMobilephoneDo) Session(config *gorm.Session) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Session(config))
}

func (e eEmployeeMobilephoneDo) Clauses(conds ...clause.Expression) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eEmployeeMobilephoneDo) Returning(value interface{}, columns ...string) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eEmployeeMobilephoneDo) Not(conds ...gen.Condition) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eEmployeeMobilephoneDo) Or(conds ...gen.Condition) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eEmployeeMobilephoneDo) Select(conds ...field.Expr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eEmployeeMobilephoneDo) Where(conds ...gen.Condition) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eEmployeeMobilephoneDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEEmployeeMobilephoneDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e eEmployeeMobilephoneDo) Order(conds ...field.Expr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eEmployeeMobilephoneDo) Distinct(cols ...field.Expr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eEmployeeMobilephoneDo) Omit(cols ...field.Expr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eEmployeeMobilephoneDo) Join(table schema.Tabler, on ...field.Expr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eEmployeeMobilephoneDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eEmployeeMobilephoneDo) RightJoin(table schema.Tabler, on ...field.Expr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eEmployeeMobilephoneDo) Group(cols ...field.Expr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eEmployeeMobilephoneDo) Having(conds ...gen.Condition) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eEmployeeMobilephoneDo) Limit(limit int) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eEmployeeMobilephoneDo) Offset(offset int) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eEmployeeMobilephoneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eEmployeeMobilephoneDo) Unscoped() IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eEmployeeMobilephoneDo) Create(values ...*models.EEmployeeMobilephone) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eEmployeeMobilephoneDo) CreateInBatches(values []*models.EEmployeeMobilephone, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eEmployeeMobilephoneDo) Save(values ...*models.EEmployeeMobilephone) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eEmployeeMobilephoneDo) First() (*models.EEmployeeMobilephone, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployeeMobilephone), nil
	}
}

func (e eEmployeeMobilephoneDo) Take() (*models.EEmployeeMobilephone, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployeeMobilephone), nil
	}
}

func (e eEmployeeMobilephoneDo) Last() (*models.EEmployeeMobilephone, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployeeMobilephone), nil
	}
}

func (e eEmployeeMobilephoneDo) Find() ([]*models.EEmployeeMobilephone, error) {
	result, err := e.DO.Find()
	return result.([]*models.EEmployeeMobilephone), err
}

func (e eEmployeeMobilephoneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EEmployeeMobilephone, err error) {
	buf := make([]*models.EEmployeeMobilephone, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eEmployeeMobilephoneDo) FindInBatches(result *[]*models.EEmployeeMobilephone, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eEmployeeMobilephoneDo) Attrs(attrs ...field.AssignExpr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eEmployeeMobilephoneDo) Assign(attrs ...field.AssignExpr) IEEmployeeMobilephoneDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eEmployeeMobilephoneDo) Joins(fields ...field.RelationField) IEEmployeeMobilephoneDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eEmployeeMobilephoneDo) Preload(fields ...field.RelationField) IEEmployeeMobilephoneDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eEmployeeMobilephoneDo) FirstOrInit() (*models.EEmployeeMobilephone, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployeeMobilephone), nil
	}
}

func (e eEmployeeMobilephoneDo) FirstOrCreate() (*models.EEmployeeMobilephone, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.EEmployeeMobilephone), nil
	}
}

func (e eEmployeeMobilephoneDo) FindByPage(offset int, limit int) (result []*models.EEmployeeMobilephone, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eEmployeeMobilephoneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eEmployeeMobilephoneDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eEmployeeMobilephoneDo) Delete(models ...*models.EEmployeeMobilephone) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eEmployeeMobilephoneDo) withDO(do gen.Dao) *eEmployeeMobilephoneDo {
	e.DO = *do.(*gen.DO)
	return e
}
